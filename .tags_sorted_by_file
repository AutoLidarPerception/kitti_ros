!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
computeBox3D	devkit/matlab/computeBox3D.m	/^function [corners_2D,face_idx] = computeBox3D(object,P)$/;"	f
computeOrientation3D	devkit/matlab/computeOrientation3D.m	/^function [orientation_2D] = computeOrientation3D(object,P)$/;"	f
drawBox2D	devkit/matlab/drawBox2D.m	/^function drawBox2D(h,object)$/;"	f
drawBox3D	devkit/matlab/drawBox3D.m	/^function drawBox3D(h,object,corners,face_idx,orientation)$/;"	f
projectToImage	devkit/matlab/projectToImage.m	/^function pts_2D = projectToImage(pts_3D, P)$/;"	f
readCalibration	devkit/matlab/readCalibration.m	/^function P = readCalibration(calib_dir,seq_idx,cam)$/;"	f
readLabels	devkit/matlab/readLabels.m	/^function tracklets = readLabels(label_dir,seq_idx)$/;"	f
visualization	devkit/matlab/visualization.m	/^function varargout = visualization(mode,image_dir,varargin)$/;"	f
wrapToPi	devkit/matlab/writeLabels.m	/^function alpha = wrapToPi(alpha)$/;"	f
writeLabels	devkit/matlab/writeLabels.m	/^function writeLabels(tracklets,label_dir, seq_idx)$/;"	f
__init__	devkit/python/evaluate_tracking.py	/^                 X=-1000,Y=-1000,Z=-1000,yaw=-10,score=-1000,track_id=-1):$/;"	m	class:tData
__init__	devkit/python/evaluate_tracking.py	/^    def __init__(self, t_sha, gt_path=".\/data\/tracking", min_overlap=0.5, max_truncation = 0, min_height = 25, max_occlusion = 2, mail=None, cls="car"):$/;"	m	class:trackingEvaluation
__str__	devkit/python/evaluate_tracking.py	/^    def __str__(self):$/;"	m	class:tData	file:
_loadData	devkit/python/evaluate_tracking.py	/^    def _loadData(self, root_dir, cls, min_score=-1000, loading_groundtruth=False):$/;"	m	class:trackingEvaluation
boxoverlap	devkit/python/evaluate_tracking.py	/^    def boxoverlap(self,a,b,criterion="union"):$/;"	m	class:trackingEvaluation
compute3rdPartyMetrics	devkit/python/evaluate_tracking.py	/^    def compute3rdPartyMetrics(self):$/;"	m	class:trackingEvaluation
createEvalDir	devkit/python/evaluate_tracking.py	/^    def createEvalDir(self):$/;"	m	class:trackingEvaluation
createSummary	devkit/python/evaluate_tracking.py	/^    def createSummary(self):$/;"	m	class:trackingEvaluation
evaluate	devkit/python/evaluate_tracking.py	/^def evaluate(result_sha,mail):$/;"	f
loadGroundtruth	devkit/python/evaluate_tracking.py	/^    def loadGroundtruth(self):$/;"	m	class:trackingEvaluation
loadTracker	devkit/python/evaluate_tracking.py	/^    def loadTracker(self):$/;"	m	class:trackingEvaluation
mail	devkit/python/evaluate_tracking.py	/^      mail = mailpy.Mail("")$/;"	v
mail	devkit/python/evaluate_tracking.py	/^      mail = mailpy.Mail(sys.argv[3])$/;"	v
printEntry	devkit/python/evaluate_tracking.py	/^    def printEntry(self, key, val,width=(70,10)):$/;"	m	class:trackingEvaluation
result_sha	devkit/python/evaluate_tracking.py	/^    result_sha = sys.argv[1]$/;"	v
saveToStats	devkit/python/evaluate_tracking.py	/^    def saveToStats(self):$/;"	m	class:trackingEvaluation
success	devkit/python/evaluate_tracking.py	/^    success = evaluate(result_sha,mail)$/;"	v
tData	devkit/python/evaluate_tracking.py	/^class tData:$/;"	c
trackingEvaluation	devkit/python/evaluate_tracking.py	/^class trackingEvaluation(object):$/;"	c
Mail	devkit/python/mailpy.py	/^class Mail:$/;"	c
__init__	devkit/python/mailpy.py	/^    def __init__(self,mailaddress):$/;"	m	class:Mail
finalize	devkit/python/mailpy.py	/^    def finalize(self,success,benchmark,sha_key,mailaddress=None):$/;"	m	class:Mail
msg	devkit/python/mailpy.py	/^    def msg(self,msg):$/;"	m	class:Mail
Munkres	devkit/python/munkres.py	/^class Munkres:$/;"	c
__all__	devkit/python/munkres.py	/^__all__     = ['Munkres', 'make_cost_matrix']$/;"	v
__author__	devkit/python/munkres.py	/^__author__    = "Brian Clapper, bmc@clapper.org"$/;"	v
__clear_covers	devkit/python/munkres.py	/^    def __clear_covers(self):$/;"	m	class:Munkres	file:
__convert_path	devkit/python/munkres.py	/^    def __convert_path(self, path, count):$/;"	m	class:Munkres	file:
__copy_matrix	devkit/python/munkres.py	/^    def __copy_matrix(self, matrix):$/;"	m	class:Munkres	file:
__copyright__	devkit/python/munkres.py	/^__copyright__ = "(c) 2008 Brian M. Clapper"$/;"	v
__docformat__	devkit/python/munkres.py	/^__docformat__ = 'restructuredtext'$/;"	v
__erase_primes	devkit/python/munkres.py	/^    def __erase_primes(self):$/;"	m	class:Munkres	file:
__find_a_zero	devkit/python/munkres.py	/^    def __find_a_zero(self):$/;"	m	class:Munkres	file:
__find_prime_in_row	devkit/python/munkres.py	/^    def __find_prime_in_row(self, row):$/;"	m	class:Munkres	file:
__find_smallest	devkit/python/munkres.py	/^    def __find_smallest(self):$/;"	m	class:Munkres	file:
__find_star_in_col	devkit/python/munkres.py	/^    def __find_star_in_col(self, col):$/;"	m	class:Munkres	file:
__find_star_in_row	devkit/python/munkres.py	/^    def __find_star_in_row(self, row):$/;"	m	class:Munkres	file:
__init__	devkit/python/munkres.py	/^    def __init__(self):$/;"	m	class:Munkres
__license__	devkit/python/munkres.py	/^__license__   = "BSD-style license"$/;"	v
__make_matrix	devkit/python/munkres.py	/^    def __make_matrix(self, n, val):$/;"	m	class:Munkres	file:
__step1	devkit/python/munkres.py	/^    def __step1(self):$/;"	m	class:Munkres	file:
__step2	devkit/python/munkres.py	/^    def __step2(self):$/;"	m	class:Munkres	file:
__step3	devkit/python/munkres.py	/^    def __step3(self):$/;"	m	class:Munkres	file:
__step4	devkit/python/munkres.py	/^    def __step4(self):$/;"	m	class:Munkres	file:
__step5	devkit/python/munkres.py	/^    def __step5(self):$/;"	m	class:Munkres	file:
__step6	devkit/python/munkres.py	/^    def __step6(self):$/;"	m	class:Munkres	file:
__url__	devkit/python/munkres.py	/^__url__       = "http:\/\/bmc.github.com\/munkres\/"$/;"	v
__version__	devkit/python/munkres.py	/^__version__   = "1.0.5.4"$/;"	v
compute	devkit/python/munkres.py	/^    def compute(self, cost_matrix):$/;"	m	class:Munkres
indexes	devkit/python/munkres.py	/^        indexes = m.compute(cost_matrix)$/;"	v
m	devkit/python/munkres.py	/^    m = Munkres()$/;"	v
make_cost_matrix	devkit/python/munkres.py	/^    def make_cost_matrix(profit_matrix, inversion_function):$/;"	m	class:Munkres
make_cost_matrix	devkit/python/munkres.py	/^    make_cost_matrix = staticmethod(make_cost_matrix)$/;"	v	class:Munkres
make_cost_matrix	devkit/python/munkres.py	/^def make_cost_matrix(profit_matrix, inversion_function):$/;"	f
matrices	devkit/python/munkres.py	/^    matrices = [$/;"	v
pad_matrix	devkit/python/munkres.py	/^    def pad_matrix(self, matrix, pad_value=0):$/;"	m	class:Munkres
print_matrix	devkit/python/munkres.py	/^def print_matrix(matrix, msg=None):$/;"	f
total_cost	devkit/python/munkres.py	/^        total_cost = 0$/;"	v
x	devkit/python/munkres.py	/^            x = cost_matrix[r][c]$/;"	v
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
bin_path	input_velodyne.py	/^    bin_path = ".\/data\/2011_09_26\/2011_09_26_drive_0001_sync\/velodyne_points\/data\/"$/;"	v
calib	input_velodyne.py	/^            calib = read_calib_file(calib_path)$/;"	v
calib_path	input_velodyne.py	/^    calib_path = None$/;"	v
center_to_sphere	input_velodyne.py	/^def center_to_sphere(places, size, resolution=0.50, min_value=np.array([0., -50., -4.5]), scale=4, x=(0, 90), y=(-50, 50), z=(-4.5, 5.5)):$/;"	f
corner_to_train	input_velodyne.py	/^def corner_to_train(corners, sphere_center, resolution=0.50, x=(0, 90), y=(-50, 50), z=(-4.5, 5.5), scale=4, min_value=np.array([0., -50., -4.5])):$/;"	f
corner_to_voxel	input_velodyne.py	/^def corner_to_voxel(voxel_shape, corners, sphere_center, scale=4):$/;"	f
corners	input_velodyne.py	/^            corners = get_boxcorners(places, rotates, size)$/;"	v
corners	input_velodyne.py	/^        corners = None$/;"	v
create_label	input_velodyne.py	/^def create_label(places, size, corners, resolution=0.50, x=(0, 90), y=(-50, 50), z=(-4.5, 5.5), scale=4, min_value=np.array([0., -50., -4.5])):$/;"	f
create_objectness_label	input_velodyne.py	/^def create_objectness_label(sphere_center, resolution=0.5, x=90, y=100, z=10, scale=4):$/;"	f
create_publish_obj	input_velodyne.py	/^def create_publish_obj(obj, places, rotates, size):$/;"	f
datas	input_velodyne.py	/^    datas = []$/;"	v
filter_camera_angle	input_velodyne.py	/^def filter_camera_angle(places):$/;"	f
get_boxcorners	input_velodyne.py	/^def get_boxcorners(places, rotates, size):$/;"	f
idx	input_velodyne.py	/^    idx = 0$/;"	v
load_pc_from_bin	input_velodyne.py	/^def load_pc_from_bin(bin_path):$/;"	f
load_pc_from_pcd	input_velodyne.py	/^def load_pc_from_pcd(pcd_path):$/;"	f
pc	input_velodyne.py	/^        pc = filter_camera_angle(pc)$/;"	v
pc	input_velodyne.py	/^        pc = load_pc_from_bin(bin_path+data)$/;"	v
pcd_path	input_velodyne.py	/^    pcd_path = None$/;"	v
places	input_velodyne.py	/^            places = bounding_boxes[idx]["place"]$/;"	v
process	input_velodyne.py	/^def process(velodyne_path, label_path=None, calib_path=None, dataformat="pcd", label_type="txt", is_velo_cam=False):$/;"	f
proj_to_velo	input_velodyne.py	/^def proj_to_velo(calib_data):$/;"	f
proj_velo	input_velodyne.py	/^            proj_velo = proj_to_velo(calib)[:, :3]$/;"	v
pub_boxes	input_velodyne.py	/^    pub_boxes = rospy.Publisher("\/kitti\/points_corners", PointCloud2, queue_size=1000000)$/;"	v
pub_points	input_velodyne.py	/^    pub_points = rospy.Publisher("\/kitti\/points_raw", PointCloud2, queue_size=1000000)$/;"	v
publish_bounding_boxes	input_velodyne.py	/^def publish_bounding_boxes(publisher, boxes):$/;"	f
publish_point_clouds	input_velodyne.py	/^def publish_point_clouds(publisher, points):$/;"	f
r	input_velodyne.py	/^        r = rospy.Rate(0.1)$/;"	v
raw_to_voxel	input_velodyne.py	/^def raw_to_voxel(pc, resolution=0.50, x=(0, 90), y=(-50, 50), z=(-4.5, 5.5)):$/;"	f
read_calib_file	input_velodyne.py	/^def read_calib_file(calib_path):$/;"	f
read_label_from_txt	input_velodyne.py	/^def read_label_from_txt(label_path):$/;"	f
read_label_from_xml	input_velodyne.py	/^def read_label_from_xml(label_path):$/;"	f
read_labels	input_velodyne.py	/^def read_labels(label_path, label_type, calib_path=None, is_velo_cam=False, proj_velo=None):$/;"	f
rotates	input_velodyne.py	/^            rotates = bounding_boxes[idx]["rotate"][:, 2]$/;"	v
size	input_velodyne.py	/^            size = bounding_boxes[idx]["size"]$/;"	v
sphere_to_center	input_velodyne.py	/^def sphere_to_center(p_sphere, resolution=0.5, scale=4, min_value=np.array([0., -50., -4.5])):$/;"	f
voxel_to_corner	input_velodyne.py	/^def voxel_to_corner(corner_vox, resolution, center):#TODO$/;"	f
xml_path	input_velodyne.py	/^    xml_path = ".\/data\/2011_09_26\/2011_09_26_drive_0001_sync\/tracklet_labels.xml"$/;"	v
OCC_FULLY	parse_xml.py	/^OCC_FULLY = 2$/;"	v
OCC_PARTLY	parse_xml.py	/^OCC_PARTLY = 1$/;"	v
OCC_UNSET	parse_xml.py	/^OCC_UNSET = 255  # -1 as uint8$/;"	v
OCC_VISIBLE	parse_xml.py	/^OCC_VISIBLE = 0$/;"	v
STATE_INTERP	parse_xml.py	/^STATE_INTERP = 1$/;"	v
STATE_LABELED	parse_xml.py	/^STATE_LABELED = 2$/;"	v
STATE_UNSET	parse_xml.py	/^STATE_UNSET = 0$/;"	v
TRUNC_BEHIND_IMAGE	parse_xml.py	/^TRUNC_BEHIND_IMAGE = 3$/;"	v
TRUNC_IN_IMAGE	parse_xml.py	/^TRUNC_IN_IMAGE = 0$/;"	v
TRUNC_OUT_IMAGE	parse_xml.py	/^TRUNC_OUT_IMAGE = 2$/;"	v
TRUNC_TRUNCATED	parse_xml.py	/^TRUNC_TRUNCATED = 1$/;"	v
TRUNC_UNSET	parse_xml.py	/^TRUNC_UNSET = 255  # -1 as uint8, but in xml files the value '99' is used!$/;"	v
Tracklet	parse_xml.py	/^class Tracklet(object):$/;"	c
__init__	parse_xml.py	/^    def __init__(self):$/;"	m	class:Tracklet
__iter__	parse_xml.py	/^    def __iter__(self):$/;"	m	class:Tracklet	file:
__str__	parse_xml.py	/^    def __str__(self):$/;"	m	class:Tracklet	file:
amtBorders	parse_xml.py	/^    amtBorders = None    # None (n x 3) float array  (amt_border_l \/ _r \/ _kf)$/;"	v	class:Tracklet
amtOccs	parse_xml.py	/^    amtOccs = None    # None or (n x 2) float array  (amt_occlusion, amt_occlusion_kf)$/;"	v	class:Tracklet
example	parse_xml.py	/^def example(kittiDir=None, drive=None):$/;"	f
firstFrame	parse_xml.py	/^    firstFrame = None$/;"	v	class:Tracklet
nFrames	parse_xml.py	/^    nFrames = None$/;"	v	class:Tracklet
objectType	parse_xml.py	/^    objectType = None$/;"	v	class:Tracklet
occFromText	parse_xml.py	/^occFromText = {'-1':OCC_UNSET, '0':OCC_VISIBLE, '1':OCC_PARTLY, '2':OCC_FULLY}$/;"	v
occs	parse_xml.py	/^    occs = None    # n x 2 uint8 array  (occlusion, occlusion_kf)$/;"	v	class:Tracklet
parseXML	parse_xml.py	/^def parseXML(trackletFile):$/;"	f
rots	parse_xml.py	/^    rots = None    # n x 3 float array (x,y,z)$/;"	v	class:Tracklet
size	parse_xml.py	/^    size = None    # len-3 float array: (height, width, length)$/;"	v	class:Tracklet
stateFromText	parse_xml.py	/^stateFromText = {'0':STATE_UNSET, '1':STATE_INTERP, '2':STATE_LABELED}$/;"	v
states	parse_xml.py	/^    states = None  # len-n uint8 array of states$/;"	v	class:Tracklet
trans	parse_xml.py	/^    trans = None   # n x 3 float array (x,y,z)$/;"	v	class:Tracklet
truncFromText	parse_xml.py	/^                  '2':TRUNC_OUT_IMAGE, '3': TRUNC_BEHIND_IMAGE}$/;"	v
truncs	parse_xml.py	/^    truncs = None  # len-n uint8 array of truncation$/;"	v	class:Tracklet
